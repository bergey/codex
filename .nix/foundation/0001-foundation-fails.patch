diff --git a/Foundation/Check/Main.hs b/Foundation/Check/Main.hs
index 52df060..45c42d2 100644
--- a/Foundation/Check/Main.hs
+++ b/Foundation/Check/Main.hs
@@ -15,6 +15,7 @@ module Foundation.Check.Main
     ( defaultMain
     ) where
 
+import           Control.Monad (MonadFail(..))
 import           Basement.Imports
 import           Basement.IntegralConv
 import           Basement.Cast (cast)
@@ -149,6 +150,9 @@ defaultMain allTestRoot = do
 newtype CheckMain a = CheckMain { runCheckMain :: StateT TestState IO a }
   deriving (Functor, Applicative, Monad, MonadIO)
 
+instance MonadFail CheckMain where
+  fail = liftIO . fail
+
 instance MonadState CheckMain where
     type State CheckMain = TestState
     withState = CheckMain . withState
diff --git a/Foundation/Monad/Except.hs b/Foundation/Monad/Except.hs
index ed5af45..0dbe220 100644
--- a/Foundation/Monad/Except.hs
+++ b/Foundation/Monad/Except.hs
@@ -38,7 +38,6 @@ instance AMPMonad m => Monad (ExceptT e m) where
         case a of
             Left e -> return (Left e)
             Right x -> runExceptT (k x)
-    fail = ExceptT . fail
 
 instance (AMPMonad m, MonadFix m) => MonadFix (ExceptT e m) where
     mfix f = ExceptT (mfix (runExceptT . f . fromEither))
diff --git a/Foundation/Network/IPv6.hs b/Foundation/Network/IPv6.hs
index 241bf5f..97e5c51 100644
--- a/Foundation/Network/IPv6.hs
+++ b/Foundation/Network/IPv6.hs
@@ -21,6 +21,7 @@ module Foundation.Network.IPv6
     , ipv6ParserIpv4Embedded
     ) where
 
+import Control.Monad
 import Prelude (fromIntegral, read)
 import qualified Text.Printf as Base
 import Data.Char (isHexDigit, isDigit)
@@ -239,7 +240,7 @@ ipv6ParserCompressed = do
     [i1,i2,i3,i4,i5,i6,i7,i8] <- format 8 bs1 bs2
     return $ fromTuple (i1,i2,i3,i4,i5,i6,i7,i8)
 
-format :: (Integral a, Monad m) => CountOf a -> [a] -> [a] -> m [a]
+format :: (Integral a, MonadFail m, Monad m) => CountOf a -> [a] -> [a] -> m [a]
 format sz bs1 bs2
     | sz <= (length bs1 + length bs2) = fail "invalid compressed IPv6 addressed"
     | otherwise = do
diff --git a/Foundation/Parser.hs b/Foundation/Parser.hs
index 74d2cb0..1736b93 100644
--- a/Foundation/Parser.hs
+++ b/Foundation/Parser.hs
@@ -63,7 +63,7 @@ module Foundation.Parser
     ) where
 
 import           Control.Applicative (Alternative, empty, (<|>), many, some, optional)
-import           Control.Monad (MonadPlus, mzero, mplus)
+import           Control.Monad (MonadFail(..), MonadPlus, mzero, mplus)
 
 import           Basement.Compat.Base
 import           Basement.Types.OffsetSize
@@ -185,6 +185,9 @@ instance ParserSource input => Monad (Parser input) where
         runParser_ (k a) buf' off' nm' err ok
     {-# INLINE (>>=) #-}
 
+instance ParserSource input => MonadFail (Parser input) where
+    fail _ = Parser $ \_ _ _ _ _ -> ParseFailed $ Satisfy Nothing
+
 instance ParserSource input => MonadPlus (Parser input) where
     mzero = error "Foundation.Parser.Internal.MonadPlus.mzero"
     mplus f g = Parser $ \buf off nm err ok ->
