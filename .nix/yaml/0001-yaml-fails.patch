diff --git a/src/Data/Yaml.hs b/src/Data/Yaml.hs
index 33fd07e..8730f7a 100644
--- a/src/Data/Yaml.hs
+++ b/src/Data/Yaml.hs
@@ -86,6 +86,7 @@ module Data.Yaml
 import Control.Applicative((<$>))
 #endif
 import Control.Exception
+import Control.Monad
 import Control.Monad.IO.Class (MonadIO, liftIO)
 import Control.Monad.Trans.Resource (MonadThrow, throwM)
 import Data.Aeson
@@ -296,5 +297,5 @@ decodeFileThrow f = liftIO $ decodeFileEither f >>= either throwIO return
 array :: [Value] -> Value
 array = Array . V.fromList
 
-parseMonad :: Monad m => (a -> Parser b) -> a -> m b
+parseMonad :: MonadFail m => (a -> Parser b) -> a -> m b
 parseMonad p = either fail return . parseEither p
diff --git a/src/Data/Yaml/Parser.hs b/src/Data/Yaml/Parser.hs
index c17c8bf..8e974e7 100644
--- a/src/Data/Yaml/Parser.hs
+++ b/src/Data/Yaml/Parser.hs
@@ -7,7 +7,7 @@ module Data.Yaml.Parser where
 
 import Control.Applicative
 import Control.Exception (Exception)
-import Control.Monad (MonadPlus (..), liftM, ap)
+import Control.Monad (MonadFail(..), MonadPlus (..), liftM, ap)
 import Control.Monad.Trans.Class (lift)
 import Control.Monad.Trans.Resource (MonadThrow, throwM)
 import Control.Monad.Trans.Writer.Strict (tell, WriterT)
@@ -52,6 +52,7 @@ instance Monad YamlParser where
         case f am of
             Left t -> Left t
             Right x -> unYamlParser (g x) am
+instance MonadFail YamlParser where
     fail = YamlParser . const . Left . pack
 instance MonadPlus YamlParser where
     mzero = fail "mzero"
